package com.example.meituan.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.meituan.beans.BusinessInformation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUSINESS_INFORMATION".
*/
public class BusinessInformationDao extends AbstractDao<BusinessInformation, String> {

    public static final String TABLENAME = "BUSINESS_INFORMATION";

    /**
     * Properties of entity BusinessInformation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", true, "NAME");
        public final static Property Logo = new Property(1, String.class, "logo", false, "LOGO");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property SellNum = new Property(4, int.class, "sellNum", false, "SELL_NUM");
        public final static Property StartPrice = new Property(5, int.class, "startPrice", false, "START_PRICE");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property DeliveryFee = new Property(7, int.class, "deliveryFee", false, "DELIVERY_FEE");
    }


    public BusinessInformationDao(DaoConfig config) {
        super(config);
    }
    
    public BusinessInformationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUSINESS_INFORMATION\" (" + //
                "\"NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: name
                "\"LOGO\" TEXT," + // 1: logo
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"ADDRESS\" TEXT," + // 3: address
                "\"SELL_NUM\" INTEGER NOT NULL ," + // 4: sellNum
                "\"START_PRICE\" INTEGER NOT NULL ," + // 5: startPrice
                "\"PHONE\" TEXT," + // 6: phone
                "\"DELIVERY_FEE\" INTEGER NOT NULL );"); // 7: deliveryFee
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUSINESS_INFORMATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BusinessInformation entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(2, logo);
        }
        stmt.bindLong(3, entity.getType());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindLong(5, entity.getSellNum());
        stmt.bindLong(6, entity.getStartPrice());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
        stmt.bindLong(8, entity.getDeliveryFee());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BusinessInformation entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(2, logo);
        }
        stmt.bindLong(3, entity.getType());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindLong(5, entity.getSellNum());
        stmt.bindLong(6, entity.getStartPrice());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
        stmt.bindLong(8, entity.getDeliveryFee());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BusinessInformation readEntity(Cursor cursor, int offset) {
        BusinessInformation entity = new BusinessInformation( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // logo
            cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.getInt(offset + 4), // sellNum
            cursor.getInt(offset + 5), // startPrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.getInt(offset + 7) // deliveryFee
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BusinessInformation entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLogo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSellNum(cursor.getInt(offset + 4));
        entity.setStartPrice(cursor.getInt(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeliveryFee(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BusinessInformation entity, long rowId) {
        return entity.getName();
    }
    
    @Override
    public String getKey(BusinessInformation entity) {
        if(entity != null) {
            return entity.getName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BusinessInformation entity) {
        return entity.getName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
